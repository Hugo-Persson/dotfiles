# yaml-language-server: $schema=https://raw.githubusercontent.com/jesseduffield/lazygit/master/schema/config.json

gui:
  showIcons: true
  theme:
    activeBorderColor:
      - magenta
      - bold
    inactiveBorderColor:
      - black
      #showFileTree: true # for rendering changes files in a tree format
os:
  edit: "nvim {{filename}}"
  editAtLine: "nvim +{{line}} {{filename}}"
  editAtLineAndWait: "nvim --block +{{line}} {{filename}}"
  editInTerminal: true
  openDirInEditor: "nvim {{dir}}"
keybinding:
  universal:
    quit: "q"
git:
  paging:
    colorArg: always
    pager: delta --dark --paging=never
customCommands:
  - key: <c-a>
    description: Pick AI commit
    command: ~/scripts/ai-commit.sh
    context: files
    output: terminal
  - key: <c-k>
    description: Koji
    command: koji
    context: files
    output: terminal
  - key: "<c-s>"
    description: "Accept their changes in merge conflict"
    command: "git checkout --theirs -- {{.SelectedFile.Name | quote}} "
    context: "files"
    prompts:
      - type: "confirm"
        title: "Accept theirs"
        body: "Are you sure you want to accept all their changes?"
  - key: "C"
    command: 'git commit -m "{{ .Form.Type }}{{if .Form.Scopes}}({{ .Form.Scopes }}){{end}}: {{ .Form.Description }}"'
    description: "commit with commitizen"
    context: "files"
    prompts:
      - type: "menu"
        title: "Select the type of change you are committing."
        key: "Type"
        options:
          - name: "Feature"
            description: "a new feature"
            value: "feat"
          - name: "Fix"
            description: "a bug fix"
            value: "fix"
          - name: "Documentation"
            description: "Documentation only changes"
            value: "docs"
          - name: "Styles"
            description: "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"
            value: "style"
          - name: "Code Refactoring"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "Performance Improvements"
            description: "A code change that improves performance"
            value: "perf"
          - name: "Tests"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
          - name: "Builds"
            description: "Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)"
            value: "build"
          - name: "Continuous Integration"
            description: "Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)"
            value: "ci"
          - name: "Chores"
            description: "Other changes that don't modify src or test files"
            value: "chore"
          - name: "Dev"
            description: "Changes to improve development workflow but does not affect code"
            value: "dev"
          - name: "Reverts"
            description: "Reverts a previous commit"
            value: "revert"
      - type: "input"
        title: "Enter the scope(s) of this change."
        key: "Scopes"
      - type: "input"
        title: "Enter the short description of the change."
        key: "Description"
      - type: "confirm"
        title: "Is the commit message correct?"
        body: "{{ .Form.Type }}{{if .Form.Scopes}}({{ .Form.Scopes }}){{end}}: {{ .Form.Description }}"
  - key: "X"
    command: 'git commit -m "{{ .Form.Message }}"'
    description: "pre configured commit messages"
    context: "files"
    prompts:
      - type: "menu"
        title: "Select the type of change you are committing."
        key: "Message"
        options:
          - name: "Bump dependencies"
            description: "chore(bump): Dependency bump"
            value: "chore(bump): Dependency bump"
          - name: "Spell bump"
            description: "chore(spell): Added spelling "
            value: "chore(spell): Added spelling "
